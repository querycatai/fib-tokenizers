{
    "model": "Rostlab/prot_bert",
    "tokenizer_class": "BertTokenizer",
    "likes": 57,
    "special_tokens": [
        "[UNK]",
        "[SEP]",
        "[PAD]",
        "[CLS]",
        "[MASK]"
    ],
    "datasets": [
        {
            "input": "hello world",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "Hello World",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "How are you doing?",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "You should've done this",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "A\n'll !!to?'d''d of, can't.",
            "ids": [
                2,
                6,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "A",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": "A"
        },
        {
            "input": "def main():\n\tpass",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "This\n\nis\na\ntest.",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "let a = obj.toString();\ntoString();",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "Hi  Hello",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "trailing space   ",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "   leading space",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\u751f\u6d3b\u7684\u771f\u8c1b\u662f",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "The company was founded in 2016.",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "test $1 R2 #3 \u20ac4 \u00a35 \u00a56 \u20a37 \u20b98 \u20b19 test",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "I bought an apple for $1.00 at the store.",
            "ids": [
                2,
                11,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "I",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": "I"
        },
        {
            "input": "you\u2026  ",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "you\u2026\u00a0\u00a0",
            "ids": [
                2,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "you\u2026\u00a0\u00a0you\u2026\u00a0\u00a0",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\u2581This \u2581is \u2581a \u2581test \u2581.",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "weird \uff5e edge \uff5e case",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "<s>\n",
            "ids": [
                2,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": " </s> test </s> ",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "</s>test</s>",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "grabbed",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": " grabbed",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "           grabbed",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\n",
            "ids": [
                2,
                3
            ],
            "tokens": [],
            "decoded": ""
        },
        {
            "input": " \n",
            "ids": [
                2,
                3
            ],
            "tokens": [],
            "decoded": ""
        },
        {
            "input": "\ttabs\t\t\t\tout here",
            "ids": [
                2,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\n\t\n",
            "ids": [
                2,
                3
            ],
            "tokens": [],
            "decoded": ""
        },
        {
            "input": "ax\n####\nboo",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\u9547",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\ud83e\udd99",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\ud83e\udd99\ua64a",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "\ua64a\ud83e\udd99",
            "ids": [
                2,
                1,
                3
            ],
            "tokens": [
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "The llama (/\u02c8l\u0251\u02d0m\u0259/; \ud83e\udd99Spanish pronunciation: [\u02c8\u028eama]) (Lama glama) is a domesticated South American camelid, widely used as a meat and pack animal by Andean cultures since the Pre-Columbian era. Llamas are social animals and live with others as a herd. Their wool is soft and contains only a small amount of lanolin.[2] Llamas can learn simple tasks after a few repetitions. When using a pack, they can carry about 25 to 30% of their body weight for 8 to 13 km (5\u20138 miles).[3] The name llama (in the past also spelled \"lama\" or \"glama\") was adopted by European settlers from native Peruvians.[4] The ancestors of llamas are thought to have originated from the Great Plains of North America about 40 million years ago, and subsequently migrated to South America about three million years ago during the Great American Interchange. By the end of the last ice age (10,000\u201312,000 years ago), camelids were extinct in North America.[3] As of 2007, there were over seven million llamas and alpacas in South America and over 158,000 llamas and 100,000\ua64a\ud83e\udd99 alpacas, descended from progenitors imported late in the 20th century, in the United States and Canada.[5] In Aymara mythology, llamas are important beings. The Heavenly Llama is said to drink water from the ocean and urinates as it rains.[6] According to Aymara eschatology, llamas will return to the water springs and lagoons where they come from at the end of time.[6]",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]"
            ],
            "decoded": ""
        },
        {
            "input": "<s></s><unk><pad>[UNK][SEP][PAD][CLS][MASK]",
            "ids": [
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                0,
                2,
                4,
                3
            ],
            "tokens": [
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[UNK]",
                "[SEP]",
                "[PAD]",
                "[CLS]",
                "[MASK]"
            ],
            "decoded": ""
        }
    ]
}